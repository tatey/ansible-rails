---
- name: deploy | deploy group
  group: name={{ deploy_username }}
         state=present

- name: deploy | generate random password
  shell: openssl rand -base64 24
  register: deploy_password

- name: deploy | deploy user
  user: name=deploy
        group={{ deploy_username }}
        groups=ssh
        password={{ deploy_password.stdout }}
        shell=/bin/bash
        state=present

- name: deploy | deploy sudoer
  template: src=sudoers.j2
            dest=/etc/sudoers.d/{{ deploy_username }}
            owner=root
            group=root
            mode=440

- name: deploy | deploy authorized key
  authorized_key: user={{ deploy_username }}
                  key="{{ lookup('file', deploy_ssh_public_key_path) }}"
                  state=present

- name: deploy | git, imagemagick, nodejs
  apt: pkg={{ item }}
       update-cache=yes
       state=latest
  with_items:
    - git-core
    - imagemagick
    - nodejs

- name: deploy | app dir
  file: path={{ deploy_app_dir }}/shared/{{ item }}
        state=directory
  with_items:
    - config
    - log
    - public/system
    - tmp/cache
    - tmp/pids
    - tmp/sockets
    - vendor/bundle

- name: deploy | app database.yaml
  copy: src=database.yml
        dest={{ deploy_app_dir }}/shared/config/database.yml

- name: deploy | app dir and file permissions
  shell: chmod 755 -R {{ deploy_app_dir }}; chown {{ deploy_username }}:{{ deploy_username }} -R {{ deploy_app_dir }}

- name: deploy | app socket permissions
  shell: if test -S {{ deploy_app_dir }}/shared/tmp/sockets/unicorn.sock; then chmod 777 {{ deploy_app_dir }}/shared/tmp/sockets/unicorn.sock; chown {{ deploy_username }}:{{ deploy_username }} {{ deploy_app_dir }}/shared/tmp/sockets/unicorn.sock; fi

- name: deploy | unicorn init
  copy: src=unicorn.sh
        dest=/etc/init.d/unicorn
        owner=root
        group=root
        mode=655

- name: deploy | unicorn conf dir
  file: dest=/etc/unicorn
        owner=root
        group=root
        mode=655
        state=directory

- name: deploy | unicorn conf
  template: src=unicorn.conf.j2
            dest=/etc/unicorn/rails.conf
            owner=root
            group=root
            mode=644

- name: deploy | unicorn starts on boot
  service: name=unicorn
           enabled=yes

- name: deploy | app database
  postgresql_db: name={{ postgres_database }}
                 state=present
  sudo_user: postgres

- name: deploy | app role
  postgresql_user: name={{ postgres_username }}
                   state=present
  sudo_user: postgres

- name: deploy | app privileges
  postgresql_privs: database={{ postgres_database }}
                    privs=ALL
                    type=database
                    role={{ postgres_username }}
                    state=present
  sudo_user: postgres

# TODO
# nginx sites available
# nginx sites enabled
